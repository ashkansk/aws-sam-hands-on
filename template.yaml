AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Hands-on application for using Lambda alongside with ApiGateway and Cognito and DynamoDB

Globals:
  Function:
    Timeout: 20
    Runtime: java11
    MemorySize: 512
    Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
      Variables:
        TABLE_NAME: !Ref SamHandsOnTable
        ENDPOINT_OVERRIDE: ""

Parameters:
  # environment parameter
  EnvType:
    Description: Environment type.
    Default: test
    Type: String
    AllowedValues:
      - prod
      - test
    ConstraintDescription: must specify prod or test.
  # copied from https://github.com/awslabs/serverless-application-model/blob/master/examples/2016-10-31/api_cognito_auth/template.yaml
  CognitoUserPoolName:
    Type: String
    Default: SamHandsOnUserPool
  CognitoUserPoolClientName:
    Type: String
    Default: angular-app-client
  #  CognitoIdentityProviderName:
  #    Type: String
  #    Default: CognitoUserPoolIdentityProvider
  CogClientCallbackUrl:
    Type: String
    Default: localhost:4200

Conditions:
  IsProd: !Equals [ !Ref EnvType, prod ]

Resources:
  MyApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref EnvType
      # All APIs are defined in a single swagger file (commented for now)
      # DefinitionUri: ./swagger.yaml
      FailOnWarnings: true
      CorsConfiguration:
        AllowHeaders:
          - x-apigateway-header
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
        # Allows all domains to call these APIs
        # SAM will automatically add AllowMethods with a list of methods for this API
        AllowOrigins:
          - '*'
        ExposeHeaders:
          - x-amzn-header
      # auth copied from https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-httpapi-oauth2authorizer.html
      # for jwt configuration see https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-user-pools-using-tokens-with-identity-providers.html
      # and also https://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-integrating-user-pools-with-identity-pools.html
      Auth:
        Authorizers:
          CognitoAuthorizer:
            JwtConfiguration:
              issuer: !Sub "https://cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}"
              audience:
                - !Ref CognitoUserPoolClient
            IdentitySource: "$request.header.Authorization"
        DefaultAuthorizer: CognitoAuthorizer
  MyGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: aws-sam-handson-first-lambda
      Handler: com.arkasoft.awssamhandson.firstlambda.App::handleRequest
      Events:
        ProxyApiRoot:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyApiGateway
            Path: /get
            Method: GET
  MyPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: aws-sam-handson-second-lambda
      Handler: com.arkasoft.awssamhandson.secondlambda.App::handleRequest
      Events:
        ProxyApiRoot:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyApiGateway
            Path: /my-resource
            Method: POST
  SamHandsOnTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: sam-handson
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # copied from https://github.com/awslabs/serverless-application-model/blob/master/examples/2016-10-31/api_cognito_auth/template.yaml
  # and also improved by aws CloudFormation docs
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref CognitoUserPoolName
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        # UnusedAccountValidityDays: 15 # default is 7 days
        # InviteMessageTemplate:
        #   EmailSubject: "subject, e.g: Your account details"
        #   EmailMessage: "uncomment this if you want to customize the message"
        #   SMSMessage: "uncomment this if you want to customize the message"
      UsernameAttributes:
        - email
        - phone_number
      # During a user pool update, you can add new schema attributes but you cannot modify or delete an existing schema attribute.
      Schema:
        - AttributeDataType: String
          Name: phone_number
          Required: true
        - AttributeDataType: String
          Name: email
          Required: true
        # set required to false to prevent this error: "Required custom attributes are not supported currently".
        - AttributeDataType: String
          Name: first_name
          Required: false
        - AttributeDataType: String
          Name: last_name
          Required: false
      # The attributes to be auto-verified. Possible values: email, phone_number.
      # This causes to send a verification message to email/phone_number with a verification code
      AutoVerifiedAttributes:
        - email
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
          - Name: verified_phone_number
            Priority: 2
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      UserPoolId: !Ref CognitoUserPool
      Domain: ashkansk
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Ref CognitoUserPoolClientName
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - aws.cognito.signin.user.admin
        - phone
        - email
        - openid
        - profile
      CallbackURLs:
        - !Ref CogClientCallbackUrl
      PreventUserExistenceErrors: ENABLED
#  CognitoIdentityProvider:
#    Type: AWS::Cognito::UserPoolIdentityProvider
#    Properties:
#      ProviderName: !Ref CognitoIdentityProviderName
#      ProviderType: LoginWithAmazon
#      UserPoolId: String

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ApiUrl:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${EnvType}/"

