AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Hands-on application for using Lambda alongside with ApiGateway and Cognito and DynamoDB

Globals:
  Function:
    Timeout: 20
    Runtime: java11
    MemorySize: 512
    Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
      Variables:
        TABLE_NAME: !Ref OrdersTable
        ENDPOINT_OVERRIDE: ""

Parameters:
  # environment parameter
  EnvType:
    Description: Environment type.
    Default: test
    Type: String
    AllowedValues:
      - prod
      - test
    ConstraintDescription: must specify prod or test.
  # copied from https://github.com/awslabs/serverless-application-model/blob/master/examples/2016-10-31/api_cognito_auth/template.yaml
  CognitoUserPoolName:
    Type: String
    Default: MyUserPool
  CognitoAppClientName:
    Type: String
    Default: angular-app-client

Conditions:
  IsProd: !Equals [ !Ref EnvType, prod ]

Resources:
  MyApiGateway:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref EnvType
      # All APIs are defined in a single swagger file
      DefinitionUri: ./swagger.yaml
      FailOnWarnings: true
      CorsConfiguration:
        AllowHeaders:
          - x-apigateway-header
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
        # Allows all domains to call these APIs
        # SAM will automatically add AllowMethods with a list of methods for this API
        AllowOrigins:
          - *
        ExposeHeaders:
          - x-amzn-header
  GetLambdaFunction1:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: HelloWorldFunction
      Handler: com.arkasoft.awssamhandson.firstlambda.App::handleRequest
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref MyApiGateway
            Path: /get1
            Method: GET
  GetLambdaFunction2:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: HelloWorldFunction
      Handler: com.arkasoft.awssamhandson.secondlambda.App::handleRequest
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref MyApiGateway
            Path: /get2
            Method: GET

  # copied from https://github.com/awslabs/serverless-application-model/blob/master/examples/2016-10-31/api_cognito_auth/template.yaml
  MyCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref CognitoUserPoolName
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
    AngularPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref MyCognitoUserPool
        ClientName: !Ref CognitoUserPoolClientName
        GenerateSecret: false

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ApiUrl:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${EnvType}/"
  HelloWorldFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt HelloWorldFunction.Arn
  HelloWorldFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt HelloWorldFunctionRole.Arn
